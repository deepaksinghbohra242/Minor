{"version":3,"file":"async-handler-express.cjs.production.min.js","sources":["../src/ErrorClass.ts","../src/index.ts","../src/catchAsync.ts","../src/handler.ts"],"sourcesContent":["class ErrorClass extends Error {\n  constructor(\n    public statusCode: number,\n    public message: string,\n    public isOperational: Boolean = true,\n    public stack = ''\n  ) {\n    super(message);\n    this.statusCode = statusCode;\n    this.isOperational = isOperational;\n    if (stack) {\n      this.stack = stack;\n    } else {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport default ErrorClass;\n","export { catchAsync } from './catchAsync';\nexport { errorHandler } from './handler';\n\nexport const asyncHandle = function (fn: Function) {\n  Promise.resolve(fn(arguments)).catch(() => {\n    return 'err';\n  });\n};\n","import Express from 'express';\ninterface callback {\n  (\n    req: Express.Request,\n    res: Express.Response,\n    next: Express.NextFunction\n  ): void;\n}\n\nexport const catchAsync = (fn: callback) => (\n  req: Express.Request,\n  res: Express.Response,\n  next: Express.NextFunction\n) => {\n  Promise.resolve(fn(req, res, next)).catch(err => next(err));\n};\n","import Express from 'express';\nimport httpStatus from 'http-status';\nimport ApiError from './ErrorClass';\n\n\n\nexport const errorHandler = (\n  err: any,\n  _req: Express.Request,\n  res: Express.Response,\n  _next: Express.NextFunction\n) => {\n\n  let error = err;\n  if (!(error instanceof ApiError)) {\n    const statusCode = error.statusCode || httpStatus.BAD_REQUEST;\n    const message = error.message || httpStatus[statusCode];\n    error = new ApiError(statusCode, message, false, err.stack);\n  }\n  if (process.env.NODE_ENV === 'production' && !err.isOperational) {\n    error.statusCode = httpStatus.INTERNAL_SERVER_ERROR;\n    error.message = httpStatus[httpStatus.INTERNAL_SERVER_ERROR];\n  }\n\n  res.locals.errorMessage = error.message;\n\n  const response = {\n    code: error.statusCode,\n    message: error.message,\n    ...(process.env.NODE_ENV === 'development' && { stack: error.stack }),\n  };\n\n  res.status(error.statusCode).send(response);\n};\n"],"names":["ErrorClass","statusCode","message","isOperational","stack","_this","Error","captureStackTrace","constructor","fn","Promise","resolve","arguments","req","res","next","err","_req","_next","error","ApiError","httpStatus","BAD_REQUEST","INTERNAL_SERVER_ERROR","locals","errorMessage","response","code","process","status","send"],"mappings":"oiDAAMA,sBACJ,WACSC,EACAC,EACAC,EACAC,yBADAD,IAAAA,GAAyB,YACzBC,IAAAA,EAAQ,KAEfC,cAAMH,qBALCD,EACAI,UAAAH,EACAG,gBAAAF,EACAE,QAAAD,EAGPC,EAAKJ,WAAaA,EAClBI,EAAKF,cAAgBA,EACjBC,EACFC,EAAKD,MAAQA,EAEbE,MAAMC,+IAAwBF,EAAKG,2GAbhBF,4BCGE,SAAUG,GACnCC,QAAQC,QAAQF,EAAGG,mBAAkB,WACnC,MAAO,6BCIe,SAACH,GAAD,OAAkB,SAC1CI,EACAC,EACAC,GAEAL,QAAQC,QAAQF,EAAGI,EAAKC,EAAKC,WAAa,SAAAC,GAAG,OAAID,EAAKC,6BCR5B,SAC1BA,EACAC,EACAH,EACAI,GAGA,IAAIC,EAAQH,EACZ,KAAMG,aAAiBC,GAAW,CAChC,IAAMnB,EAAakB,EAAMlB,YAAcoB,EAAWC,YAElDH,EAAQ,IAAIC,EAASnB,EADLkB,EAAMjB,SAAWmB,EAAWpB,IACF,EAAOe,EAAIZ,OAETY,EAAIb,gBAChDgB,EAAMlB,WAAaoB,EAAWE,sBAC9BJ,EAAMjB,QAAUmB,EAAWA,EAAWE,wBAGxCT,EAAIU,OAAOC,aAAeN,EAAMjB,QAEhC,IAAMwB,KACJC,KAAMR,EAAMlB,WACZC,QAASiB,EAAMjB,UACX0B,GAGNd,EAAIe,OAAOV,EAAMlB,YAAY6B,KAAKJ"}