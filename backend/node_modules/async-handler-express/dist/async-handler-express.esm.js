import httpStatus from 'http-status';

var catchAsync = function catchAsync(fn) {
  return function (req, res, next) {
    Promise.resolve(fn(req, res, next))["catch"](function (err) {
      return next(err);
    });
  };
};

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var ErrorClass = /*#__PURE__*/function (_Error) {
  _inheritsLoose(ErrorClass, _Error);

  function ErrorClass(statusCode, message, isOperational, stack) {
    var _this;

    if (isOperational === void 0) {
      isOperational = true;
    }

    if (stack === void 0) {
      stack = '';
    }

    _this = _Error.call(this, message) || this;
    _this.statusCode = statusCode;
    _this.message = message;
    _this.isOperational = isOperational;
    _this.stack = stack;
    _this.statusCode = statusCode;
    _this.isOperational = isOperational;

    if (stack) {
      _this.stack = stack;
    } else {
      Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    }

    return _this;
  }

  return ErrorClass;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var errorHandler = function errorHandler(err, _req, res, _next) {
  var error = err;

  if (!(error instanceof ErrorClass)) {
    var statusCode = error.statusCode || httpStatus.BAD_REQUEST;
    var message = error.message || httpStatus[statusCode];
    error = new ErrorClass(statusCode, message, false, err.stack);
  }

  if (process.env.NODE_ENV === 'production' && !err.isOperational) {
    error.statusCode = httpStatus.INTERNAL_SERVER_ERROR;
    error.message = httpStatus[httpStatus.INTERNAL_SERVER_ERROR];
  }

  res.locals.errorMessage = error.message;

  var response = _extends({
    code: error.statusCode,
    message: error.message
  }, process.env.NODE_ENV === 'development' && {
    stack: error.stack
  });

  res.status(error.statusCode).send(response);
};

var asyncHandle = function asyncHandle(fn) {
  Promise.resolve(fn(arguments))["catch"](function () {
    return 'err';
  });
};

export { asyncHandle, catchAsync, errorHandler };
//# sourceMappingURL=async-handler-express.esm.js.map
